# Задача:
# Даны два списка, нужно вернуть элементы, которые есть в 1-ом списке, но нет во 2-ом. 
# Оценить эффективность своего решения.


# Эффективность: O(n + m), где n - длина list_1, а m - длина list_2
# Конвертация множеств в списки и наоборот - O(m), где m - длина коллекции. 
# Вычитание множеств - O(n), где n - длина первого множества в выражении.
def get_lists_difference(list_1, list_2):
    return list(set(list_1) - set(list_2))
# Это решение подходит только в случае, когда в list_1 нет повторяющихся элементов.
# Для остальных случаев подходят такие решения:


# Эффективность: O(n * m), где n - длина list_1, а m - длина list_2
# Проивзодится вложенная итерация (цикл внутри цикла): итерация list_1,
# для каждого элемента производится проверка его наличия в list_2
# при которой происходит итерация по list_2 (`if el not in list_2`)
def get_lists_difference(list_1, list_2):
    return [el for el in list_1 if el not in list_2]


# Более эффективное решение:
# Эффективность: O(n + m), где n - длина list_1, а m - длина list_2.
# Оно получается из 2-х операций: конвертации list_2 в множество и итерации по list_1.
# Конвертация list_2 в множество займет O(m) времени.
# Операция проверки наличия элемента в множестве занимает O(1),
# поэтому при итерации по list_1, проверка каждого элемента займет O(1),
# а сама итерация по list_1 - O(n).
def get_lists_difference(list_1, list_2):
    set_2 = set(list_1)
    return [x for x in list_2 if x not in set_2]
